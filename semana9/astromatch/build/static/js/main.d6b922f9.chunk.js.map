{"version":3,"sources":["components/MatchesList/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["MatchesList","className","onClick","this","props","React","Component","Home","state","vaiParaListaDeMatches","perfil","onClickIrListaMatches","setState","pegaPerfil","axios","get","headers","Authorization","then","resposta","data","profile","catch","error","console","log","escolherPessoa","darMatch","src","photo","name","age","bio","App","onClickVoltarHome","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qNAEaA,EAAb,uKAEQ,OAAO,yBAAKC,UAAW,WACnB,gCACA,0CACA,4BAAQC,QAASC,KAAKC,MAAMF,SAA5B,qBAEA,8BACI,4BACI,4BACI,8BACA,sCAGR,sEAdhB,GAAiCG,IAAMC,W,iBCC1BC,EAAb,4MACIC,MAAQ,CACJC,uBAAuB,EACvBC,OAAQ,IAHhB,EAMEC,sBAAwB,WACtB,EAAKC,SAAS,CAAEH,uBAAuB,KAP3C,EAcII,WAAa,WACTC,IACGC,IACC,+FACA,CACEC,QAAS,CACPC,cAAe,2BAIpBC,MAAK,SAAAC,GACJ,EAAKP,SAAS,CAACF,OAAQS,EAASC,KAAKC,aAEtCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OA5BxB,EAgCMG,eAAiB,aAhCvB,EAoCMC,SAAW,WACT,EAAKd,aACL,EAAKa,kBAtCb,kEAWQvB,KAAKU,eAXb,+BA2CQ,OADAW,QAAQC,IAAItB,KAAKK,MAAME,QAEnB,yBAAKT,UAAU,QACb,0CACA,6BAAK,yBAAK2B,IAAKzB,KAAKK,MAAME,OAAOmB,SACjC,8BAAM,gCAAS1B,KAAKK,MAAME,OAAOoB,KAA3B,OACN,8BAAO3B,KAAKK,MAAME,OAAOqB,IAAzB,SACA,2BAAI5B,KAAKK,MAAME,OAAOsB,KACtB,4BAAQ9B,QAASC,KAAKU,YAAtB,aACA,4BAAQX,QAASC,KAAKwB,UAAtB,kBAnDd,GAA0BtB,IAAMC,WCwBjB2B,EAtBf,4MACEzB,MAAQ,CACNC,uBAAuB,GAF3B,EAKEE,sBAAwB,WACtB,EAAKC,SAAS,CAAEH,uBAAuB,KAN3C,EASEyB,kBAAoB,WAClB,EAAKtB,SAAS,CAAEH,uBAAuB,KAV3C,uDAcI,OAAGN,KAAKK,MAAMC,sBACL,kBAAC,EAAD,CAAaP,QAASC,KAAK+B,oBAE3B,kBAAC,EAAD,CAAMhC,QAASC,KAAKQ,4BAjBjC,GAAyBN,IAAMC,WCOX6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2B,c","file":"static/js/main.d6b922f9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport class MatchesList extends React.Component {\r\n    render() {\r\n        return <div className={'Matches'}>\r\n            <header>\r\n            <h2>Astromatch</h2>\r\n            <button onClick={this.props.onClick}>Voltar para Home</button>\r\n            </header>\r\n            <main>\r\n                <ul>\r\n                    <li>\r\n                        <img/>\r\n                        <p>Nome:</p>\r\n                    </li>\r\n                </ul>\r\n                <button>Limpar Descartados e Matches</button>\r\n            </main> \r\n        </div>\r\n    }\r\n}  \r\n","import React from 'react'\r\nimport axios from 'axios'\r\n\r\nexport class Home extends React.Component {\r\n    state = {\r\n        vaiParaListaDeMatches: false, \r\n        perfil: {}\r\n    }\r\n    \r\n  onClickIrListaMatches = () => {\r\n    this.setState({ vaiParaListaDeMatches: true })\r\n  }\r\n\r\n    componentDidMount() {\r\n        this.pegaPerfil()\r\n    }\r\n    \r\n    pegaPerfil = () => {\r\n        axios\r\n          .get(\r\n            'https://us-central1-missao-newton.cloudfunctions.net/astroMatch/carolina-muniz-julian/person',\r\n            {\r\n              headers: {\r\n                Authorization: \"carolina-muniz-julian\"\r\n              }\r\n            }\r\n          )\r\n          .then(resposta => {\r\n            this.setState({perfil: resposta.data.profile})\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          });\r\n      }\r\n\r\n      escolherPessoa = () => {\r\n\r\n      }\r\n\r\n      darMatch = () => {\r\n        this.pegaPerfil()\r\n        this.escolherPessoa()\r\n      }\r\n    \r\n    render() {\r\n        console.log(this.state.perfil)\r\n        return(\r\n            <div className='Home'>\r\n              <h1>astromatch</h1>\r\n              <div><img src={this.state.perfil.photo}/></div>\r\n              <span><strong>{this.state.perfil.name}, </strong></span>\r\n              <span>{this.state.perfil.age} anos</span>\r\n              <p>{this.state.perfil.bio}</p>\r\n              <button onClick={this.pegaPerfil}>Descartar</button>\r\n              <button onClick={this.darMatch}>Dar Match</button>\r\n            </div>\r\n        );\r\n    }\r\n      \r\n} \r\n\r\n\r\n\r\n","import React from 'react';\nimport { MatchesList } from './components/MatchesList';\nimport { Home } from './components/Home';\n\n\nexport class App extends React.Component {\n  state = {\n    vaiParaListaDeMatches: false\n  }\n\n  onClickIrListaMatches = () => {\n    this.setState({ vaiParaListaDeMatches: true })\n  }\n\n  onClickVoltarHome = () => {\n    this.setState({ vaiParaListaDeMatches: false })\n  }\n \n  render() {\n    if(this.state.vaiParaListaDeMatches) {\n      return <MatchesList onClick={this.onClickVoltarHome}/>\n    } else {\n      return <Home onClick={this.onClickIrListaMatches}/>\n    }\n  }\n}  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}